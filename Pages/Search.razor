@page "/search"
@using System.Net.Http.Headers
@using BlazorWhoknowsV2.Provider
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory // Inject IHttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [AllowAnonymous]

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-6">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="text-center mb-4">Search</h3>

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger text-center">@ErrorMessage</div>
                    }

                    <EditForm Model="searchRequest" OnValidSubmit="HandleSearch" FormName="this">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="query" class="form-label">Search Query</label>
                            <InputText id="query" class="form-control" @bind-Value="searchRequest.Query" placeholder="Enter your search query" />
                        </div>

                        <div class="mb-3">
                            <label for="language" class="form-label">Language</label>
                            <InputText id="language" class="form-control" @bind-Value="searchRequest.Language" placeholder="Enter the language" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Search</button>
                    </EditForm>
                </div>
            </div>

            @if (searchResults != null && searchResults.Any())
            {
                <div class="mt-4">
                    <h4 class="text-center mb-3">Search Results</h4>
                    <ul class="list-group">
                        @foreach (var result in searchResults)
                        {
                            <li class="list-group-item">
                                <span @onclick="() => ToggleDetails(result.Id)" class="fw-bold text-primary" style="cursor: pointer;">
                                    @result.Title
                                </span>
                                @if (expandedIds.Contains(result.Id))
                                {
                                    <div class="details mt-2 p-3 border rounded bg-light">
                                        <h5>Details:</h5>
                                        <p>@result.Content</p>
                                    </div>
                                }
                            </li>
                        }
                    </ul>
                </div>
            }
            else if (searchPerformed)
            {
                <div class="alert alert-info mt-4 text-center">
                    No results found.
                </div>
            }
        </div>
    </div>
</div>


@code {
    private SearchRequest searchRequest = new SearchRequest();
    private List<PageResult> searchResults = new List<PageResult>();
    private bool searchPerformed = false;
    private string ErrorMessage;
    private HashSet<int?> expandedIds = new HashSet<int?>(); // Store expanded IDs

    private async Task HandleSearch()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            var response = await client.GetAsync($"search?q={searchRequest.Query}&language={searchRequest.Language}");

            Console.WriteLine("Response:" + response);

            if (response.IsSuccessStatusCode)
            {
                var resultWrapper = await response.Content.ReadFromJsonAsync<List<PageResult>>(); // Deserialize the response
                searchResults = resultWrapper; // Directly assign the list of results
                searchPerformed = true;
            }
            else
            {
                ErrorMessage = "Search failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred during the search: {ex.Message}";
        }
    }

    private void ToggleDetails(int? id)
    {
        if (expandedIds.Contains(id))
        {
            expandedIds.Remove(id); // Collapse if already expanded
        }
        else
        {
            expandedIds.Add(id); // Expand if not already expanded
        }
    }

    private class SearchRequest
    {
        public string Query { get; set; } = string.Empty;
        public string Language { get; set; } = "en";
    }

    private class SearchResponse
    {
        public List<PageResult> Results { get; set; } // Example of renaming the property based on the API response
    }

    private class PageResult
    {
        public int? Id { get; set; }
        public string Title { get; set; } // Title of the page
        public string Url { get; set; }   // URL of the page
        public string Language { get; set; } // Language of the page
        public DateTime? LastUpdated { get; set; } // Last updated timestamp
        public string Content { get; set; } // The content or snippet of the page
    }
}
