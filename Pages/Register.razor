@using System.Net.Http.Headers
@using BlazorWhoknowsV2.Provider
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory 
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [AllowAnonymous]

<div class=" mt-5">
    <div class="row justify-content-center">
        <div class="col-md-12 ">
            <div class="card shadow-lg">
                <div class="card-body">
                    <h3 class="text-center mb-4">Create Account</h3>

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger text-center">@ErrorMessage</div>
                    }

                    @if (success)
                    {
                        <div class="text-center">
                            <h4 class="text-success">Registration Successful! 🎉</h4>
                            <div class="fireworks-container"></div>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="registerRequest" OnValidSubmit="HandleRegister" FormName="this">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <InputText id="username" class="form-control" @bind-Value="registerRequest.Username" placeholder="Enter your username" />
                            </div>

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" type="email" class="form-control" @bind-Value="registerRequest.Email" placeholder="Enter your email" />
                            </div>

                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <InputText id="password" type="password" class="form-control" @bind-Value="registerRequest.Password" placeholder="Enter your password" />
                            </div>

                            <button type="submit" class="btn btn-primary w-100">Register</button>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Fireworks Animation -->
<style>
.fireworks-container {
    position: relative;
    width: 100%;
    height: 150px;
    margin-top: 20px;
    background: transparent;
    overflow: hidden;
}

.firework {
    position: absolute;
    width: 4px;
    height: 4px;
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    animation: explode 1.5s ease-out infinite;
}

@@keyframes explode {
    0% {
        transform: scale(1);
        opacity: 1;
    }
    50% {
        transform: scale(2);
        opacity: 0.6;
    }
    100% {
        transform: scale(0.5);
        opacity: 0;
    }
}
</style>

<script>
function triggerFireworks() {
    const container = document.querySelector('.fireworks-container');
    if (!container) return;

    for (let i = 0; i < 20; i++) {
        const firework = document.createElement('div');
        firework.classList.add('firework');
        firework.style.left = `${Math.random() * 100}%`;
        firework.style.top = `${Math.random() * 100}%`;
        firework.style.animationDelay = `${Math.random()}s`;
        firework.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 70%)`;
        container.appendChild(firework);

        // Remove the firework after animation
        setTimeout(() => firework.remove(), 1500);
    }
}
</script>

@code {
    private RegisterRequest registerRequest = new RegisterRequest();
    private string ErrorMessage;
    private bool success = false;

    private async Task HandleRegister()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            var response = await client.PostAsJsonAsync("register", registerRequest);

            if (response.IsSuccessStatusCode)
            {
                success = true;

                // Trigger fireworks animation
                await JSRuntime.InvokeVoidAsync("triggerFireworks");
            }
            else
            {
                ErrorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception)
        {
            ErrorMessage = "An error occurred during registration.";
        }
    }

    private class RegisterRequest
    {
        public string Username { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
