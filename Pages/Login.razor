@page "/login"
@using System.Net.Http.Headers
@using BlazorWhoknowsV2.Provider
@inject HttpClient HttpClient
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@attribute [AllowAnonymous]

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-body">
                    <h3 class="text-center mb-4">Login</h3>

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger text-center">@ErrorMessage</div>
                    }

                    <EditForm Model="loginRequest" OnValidSubmit="HandleLogin" FormName="this">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="loginRequest.Username" placeholder="Enter your username" />
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" placeholder="Enter your password" />
                        </div>

                        @if (!showRegister)
                        {
                        <!-- CAPTCHA here -->
                        <div id="captcha-container" class="mb-3 text-center">
                            <div class="g-recaptcha" data-sitekey="@SiteKey"></div>
                        </div>
                        
                        <button type="submit" class="btn btn-primary w-100">Login</button>
                        }
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <small class="text-muted">
                        Don't have an account yet?
                        <button @onclick="ShowRegister" class="btn btn-link text-decoration-none">Create Account</button>.
                    </small>
                </div>
            </div>
        </div>
    </div>

    <!-- Register Component - Show/Hide -->
    @if (showRegister)
    {
        <div class="row justify-content-center mt-4">
            <div class="col-md-6 col-lg-4">
                <div class="register-container animated fadeIn">
                    <Register />
                </div>
            </div>
        </div>
    }
</div>


<script src="https://www.google.com/recaptcha/api.js" async defer></script>

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private string ErrorMessage;
    private string SiteKey;
    private bool showRegister = false;

    protected override void OnInitialized()
    {
        SiteKey = Configuration["GoogleCaptcha:SiteKey"];
    }

    private async Task HandleLogin()
    {
        try
        {
            // Getting CAPTCHA token from client like so

            var captchaResponse = await JSRuntime.InvokeAsync<string>("grecaptcha.getResponse", null);


            if (string.IsNullOrEmpty(captchaResponse))
            {
                ErrorMessage = "Please verify you are not a robot.";
                return;
            }

            // Include CAPTCHA response in the login request
            loginRequest.CaptchaResponse = captchaResponse;

            var client = HttpClientFactory.CreateClient("ApiClient");
            var response = await client.PostAsJsonAsync("login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(result.Token);
                Console.WriteLine($"Token stored: {result.Token}");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Invalid login attempt.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred during login.";
        }
    }

    private async void ShowRegister()
    {
        showRegister = !showRegister;

     
    }

    private class LoginRequest
    {
        public string Username { get; set; }
        public string Password { get; set; }
        public string CaptchaResponse { get; set; }
    }

    private class LoginResponse
    {
        public string Token { get; set; }
    }
}
