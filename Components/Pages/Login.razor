@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using WhoKnowsV2.util
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using System.Text.Json
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@rendermode InteractiveServer


<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
    <DataAnnotationsValidator />
    <div class="form-floating mb-3">
        <InputText class="form-control" id="" @bind-Value="loginModel.Username" placeholder="Username" />
        <label for="">Username</label>
    </div>
    <div class="form-floating">
        <InputText class="form-control" id="floatingPassword" @bind-Value="loginModel.Password" placeholder="Password" type="password" />
        <label for="floatingPassword">Password</label>
    </div>
    <ValidationSummary />
    <button class="btn btn-success" type="submit">Login</button>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
</EditForm>


@code {
    LoginRequest loginModel = new LoginRequest();
    private string errorMessage;

    private async Task HandleLogin(EditContext editContext)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7100/api/Login/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await ((ApiAuthenticationStateProvider)AuthStateProvider).MarkUserAsAuthenticated(result.Token);
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while trying to log in. Please try again.";
            // Optionally log the exception
        }
    }

    public class LoginRequest
    {
        [Required(ErrorMessage = "Username is required.")]
        [DataType(DataType.Text)]
        public string Username { get; set; } 

        [Required(ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
}
