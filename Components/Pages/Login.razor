@page "/Login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities
@using WhoKnowsV2.util
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider

@attribute [AllowAnonymous]

<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="thisForm">
    <DataAnnotationsValidator />
    <div class="form-group">
        <InputText id="username" @bind-Value="loginModel.Username" placeholder="Username" />
    </div>
    <div class="form-group">
        <InputText id="password" @bind-Value="loginModel.Password" placeholder="Password" type="password" />
    </div>
    <button type="submit">Login</button>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
</EditForm>


@code {
    private LoginRequest loginModel = new LoginRequest();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            // Send login request
            var response = await Http.PostAsJsonAsync("https://localhost:7100/api/Login/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                // Read response
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await ((ApiAuthenticationStateProvider)AuthStateProvider).MarkUserAsAuthenticated(result.Token);

                // Parse return URL from query parameters
                var returnUrl = Navigation.ToAbsoluteUri(Navigation.Uri).Query;
                var queryParams = QueryHelpers.ParseQuery(returnUrl);
                var returnUrlParam = queryParams.ContainsKey("ReturnUrl") ? queryParams["ReturnUrl"].FirstOrDefault() : "/";

                // Navigate to return URL or fallback to home
                Navigation.NavigateTo(!string.IsNullOrWhiteSpace(returnUrlParam) ? returnUrlParam : "/");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            // Handle and log exception
            Console.WriteLine($"Exception in HandleLogin: {ex.Message}");
            errorMessage = "An unexpected error occurred.";
        }
    }

    public class LoginRequest
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
}
